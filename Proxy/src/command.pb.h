// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef PROTOBUF_command_2eproto__INCLUDED
#define PROTOBUF_command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ESB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_command_2eproto();
void protobuf_AssignDesc_command_2eproto();
void protobuf_ShutdownFile_command_2eproto();

class Command;

enum Command_Cmd {
  Command_Cmd_INVOKE_CALL = 1,
  Command_Cmd_INVOKE_RESPONSE = 2
};
bool Command_Cmd_IsValid(int value);
const Command_Cmd Command_Cmd_Cmd_MIN = Command_Cmd_INVOKE_CALL;
const Command_Cmd Command_Cmd_Cmd_MAX = Command_Cmd_INVOKE_RESPONSE;
const int Command_Cmd_Cmd_ARRAYSIZE = Command_Cmd_Cmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Cmd_descriptor();
inline const ::std::string& Command_Cmd_Name(Command_Cmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Cmd_descriptor(), value);
}
inline bool Command_Cmd_Parse(
    const ::std::string& name, Command_Cmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Cmd>(
    Command_Cmd_descriptor(), name, value);
}
// ===================================================================

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Command_Cmd Cmd;
  static const Cmd INVOKE_CALL = Command_Cmd_INVOKE_CALL;
  static const Cmd INVOKE_RESPONSE = Command_Cmd_INVOKE_RESPONSE;
  static inline bool Cmd_IsValid(int value) {
    return Command_Cmd_IsValid(value);
  }
  static const Cmd Cmd_MIN =
    Command_Cmd_Cmd_MIN;
  static const Cmd Cmd_MAX =
    Command_Cmd_Cmd_MAX;
  static const int Cmd_ARRAYSIZE =
    Command_Cmd_Cmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cmd_descriptor() {
    return Command_Cmd_descriptor();
  }
  static inline const ::std::string& Cmd_Name(Cmd value) {
    return Command_Cmd_Name(value);
  }
  static inline bool Cmd_Parse(const ::std::string& name,
      Cmd* value) {
    return Command_Cmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ESB.Command.Cmd cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::ESB::Command_Cmd cmd() const;
  inline void set_cmd(::ESB::Command_Cmd value);

  // optional string identifier = 2;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // required int32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ESB.Command)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* identifier_;
  int cmd_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// Command

// required .ESB.Command.Cmd cmd = 1;
inline bool Command::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::ESB::Command_Cmd Command::cmd() const {
  return static_cast< ::ESB::Command_Cmd >(cmd_);
}
inline void Command::set_cmd(::ESB::Command_Cmd value) {
  assert(::ESB::Command_Cmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional string identifier = 2;
inline bool Command::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& Command::identifier() const {
  return *identifier_;
}
inline void Command::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Command::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Command::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* Command::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 version = 3;
inline bool Command::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Command::version() const {
  return version_;
}
inline void Command::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ESB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESB::Command_Cmd>() {
  return ::ESB::Command_Cmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_command_2eproto__INCLUDED
